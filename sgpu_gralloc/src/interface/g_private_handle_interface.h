///
/// @file g_private_handle_interface.h
/// @copyright 2021-2022 Samsung Electronics
///

/// THIS IS AN AUTOGENERATED FILE ///
///   DO NOT EDIT THIS FILE       ///

#ifndef PRIVATE_HANDLE_INTERFACE_H_
#define PRIVATE_HANDLE_INTERFACE_H_

#include <stdint.h>

struct native_handle;

enum SGR_INTF_SGR_ALLOC_LAYOUT {
        SGR_INTF_SGR_ALLOC_LAYOUT_NONE = 0,
        SGR_INTF_SGR_ALLOC_LAYOUT_LINEAR = 1,
        SGR_INTF_SGR_ALLOC_LAYOUT_DCC = 2,
        SGR_INTF_SGR_ALLOC_LAYOUT_SBWC = 3,
        SGR_INTF_SGR_ALLOC_LAYOUT_COUNT = 4,
};

int sgr_intf_get_private_handle_t_fds(const struct native_handle *handle, int fds_index);

uint32_t sgr_intf_get_private_handle_t_magic(const struct native_handle *handle);

uint64_t sgr_intf_get_private_handle_t_reserved_region_size(const struct native_handle *handle);

int sgr_intf_get_private_handle_t_handles(const struct native_handle *handle, int handles_index);

uint64_t sgr_intf_get_private_handle_t_alloc_bases(const struct native_handle *handle, int alloc_bases_index);

uint64_t sgr_intf_get_private_handle_t_metadata_base(const struct native_handle *handle);

int sgr_intf_get_private_handle_t_pid(const struct native_handle *handle);

uint64_t sgr_intf_get_private_handle_t_lock_cpu_usage(const struct native_handle *handle);

int sgr_intf_get_private_handle_t_lock_count(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_width(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_height(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_format(const struct native_handle *handle);

uint64_t sgr_intf_get_private_handle_t_usage(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_alloc_width(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_alloc_height(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_alloc_format(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_alloc_layout(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_num_planes(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_num_allocs(const struct native_handle *handle);

int64_t sgr_intf_get_private_handle_t_plane_infos_size(const struct native_handle *handle, int plane_infos_index);

int64_t sgr_intf_get_private_handle_t_plane_infos_offset(const struct native_handle *handle, int plane_infos_index);

int64_t sgr_intf_get_private_handle_t_plane_infos_stride_in_bytes(const struct native_handle *handle, int plane_infos_index);

int64_t sgr_intf_get_private_handle_t_plane_infos_width_in_samples(const struct native_handle *handle, int plane_infos_index);

int64_t sgr_intf_get_private_handle_t_plane_infos_height_in_samples(const struct native_handle *handle, int plane_infos_index);

uint32_t sgr_intf_get_private_handle_t_alloc_infos_size(const struct native_handle *handle, int alloc_infos_index);

uint32_t sgr_intf_get_private_handle_t_alloc_infos_key_offset(const struct native_handle *handle, int alloc_infos_index);

uint32_t sgr_intf_get_private_handle_t_major_version(const struct native_handle *handle);

uint32_t sgr_intf_get_private_handle_t_minor_version(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_buffer_id(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_length_name(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_width(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_height(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_layer_count(const struct native_handle *handle);

int32_t sgr_intf_get_sgr_metadata_pixel_format_requested(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_pixel_format_fourcc(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_pixel_format_modifier(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_usage(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_allocation_size(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_protected_content(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_compression(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_interlaced(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_chroma_siting(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_num_plane_layouts(const struct native_handle *handle);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_num_components(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_components_component_type(const struct native_handle *handle, int plane_layouts_index, int components_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_components_offset_in_bits(const struct native_handle *handle, int plane_layouts_index, int components_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_components_size_in_bits(const struct native_handle *handle, int plane_layouts_index, int components_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_offset_in_bytes(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_sample_increment_in_bits(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_stride_in_bytes(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_width_in_samples(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_height_in_samples(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_total_size_in_bytes(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_horizontal_subsampling(const struct native_handle *handle, int plane_layouts_index);

int64_t sgr_intf_get_sgr_metadata_plane_layouts_vertical_subsampling(const struct native_handle *handle, int plane_layouts_index);

uint64_t sgr_intf_get_sgr_metadata_num_crops(const struct native_handle *handle);

int32_t sgr_intf_get_sgr_metadata_crops_left(const struct native_handle *handle, int crops_index);

int32_t sgr_intf_get_sgr_metadata_crops_top(const struct native_handle *handle, int crops_index);

int32_t sgr_intf_get_sgr_metadata_crops_right(const struct native_handle *handle, int crops_index);

int32_t sgr_intf_get_sgr_metadata_crops_bottom(const struct native_handle *handle, int crops_index);

int32_t sgr_intf_get_sgr_metadata_dataspace(const struct native_handle *handle);

int32_t sgr_intf_get_sgr_metadata_blend_mode(const struct native_handle *handle);

bool sgr_intf_get_sgr_metadata_is_smpte2086_set(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_primary_red_x(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_primary_red_y(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_primary_green_x(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_primary_green_y(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_primary_blue_x(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_primary_blue_y(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_white_point_x(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_white_point_y(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_max_luminance(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_smpte2086_min_luminance(const struct native_handle *handle);

bool sgr_intf_get_sgr_metadata_is_cta861_3_set(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_cta861_3_max_content_light_level(const struct native_handle *handle);

float sgr_intf_get_sgr_metadata_cta861_3_max_frame_average_light_level(const struct native_handle *handle);

uint64_t sgr_intf_get_sgr_metadata_length_smpte2094_40(const struct native_handle *handle);

uint8_t sgr_intf_get_sgr_metadata_smpte2094_40(const struct native_handle *handle, int smpte2094_40_index);

uint32_t sgr_intf_get_sgr_metadata_alloc_width(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_alloc_height(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_alloc_format(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_alloc_layout(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_num_allocs(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_allocs_alignment(const struct native_handle *handle, int allocs_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_total_size(const struct native_handle *handle, int allocs_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_data_offset(const struct native_handle *handle, int allocs_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_data_size(const struct native_handle *handle, int allocs_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_key_offset(const struct native_handle *handle, int allocs_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_key_size(const struct native_handle *handle, int allocs_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_payload_offset(const struct native_handle *handle, int allocs_index, int payload_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_payload_size(const struct native_handle *handle, int allocs_index, int payload_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_header_offset(const struct native_handle *handle, int allocs_index, int header_index);

uint32_t sgr_intf_get_sgr_metadata_allocs_header_size(const struct native_handle *handle, int allocs_index, int header_index);

bool sgr_intf_get_sgr_metadata_sub_valid(const struct native_handle *handle);

uint32_t sgr_intf_get_sgr_metadata_gpu_dcc_sw_mode(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_dcc_sw_mode(struct native_handle *handle, const uint32_t set_val);

uint32_t sgr_intf_get_sgr_metadata_gpu_dcc_is_pipe_aligned(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_dcc_is_pipe_aligned(struct native_handle *handle, const uint32_t set_val);

uint32_t sgr_intf_get_sgr_metadata_gpu_dcc_max_uncompressed_block_size(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_dcc_max_uncompressed_block_size(struct native_handle *handle, const uint32_t set_val);

uint32_t sgr_intf_get_sgr_metadata_gpu_dcc_max_compressed_block_size(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_dcc_max_compressed_block_size(struct native_handle *handle, const uint32_t set_val);

uint32_t sgr_intf_get_sgr_metadata_gpu_dcc_independent_block_size_64(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_dcc_independent_block_size_64(struct native_handle *handle, const uint32_t set_val);

uint32_t sgr_intf_get_sgr_metadata_gpu_dcc_independent_block_size_128(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_dcc_independent_block_size_128(struct native_handle *handle, const uint32_t set_val);

uint32_t sgr_intf_get_sgr_metadata_gpu_is_metadata_initialized(const struct native_handle *handle);
void sgr_intf_set_sgr_metadata_gpu_is_metadata_initialized(struct native_handle *handle, const uint32_t set_val);

#endif        // PRIVATE_HANDLE_INTERFACE_H_
